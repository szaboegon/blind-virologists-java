package koporscho;
import proto.Prototype;
import java.util.ArrayList;
import java.util.StringJoiner;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Koporscho csapat Projlab 
//  @ File Name : Field.java
//  @ Date : 2022. 03. 25.
//  @ Authors : Szab� Egon, Bir� Ferenc, T�th B�lint, Ferge M�t�, Rahmi D�niel
//
//


/**
 * A pályán szereplő mezőknek az absztrakt ősosztálya
 */
public abstract class Field {
	/** A mezőn álló karaktereket tárolja.*/
	private final ArrayList<Character> characters = new ArrayList<>();

	/** Az adott mezőnek a szomszédos (közös oldallal rendelkező) mezőit tárolja.*/
	private ArrayList<Field> neighbors = new ArrayList<>();

	/**
	 * Elhelyezi a paraméterként megadott karaktert a mezőn.
	 * @param target A mezőre lépő karakter
	 */
	public void Accept(Character target) {
		characters.add(target);
	}

	/**
	 * Tisztán virtuális függvény, amely meghívja a paraméterként kapott visitornak megfelelő függvényét
	 * @param vis Visitor típusa
	 */
	abstract public void React(IVis vis);

	/**
	 * Eltávolítja a paraméterként megadott karaktert a mezőről.
	 * @param target Az eltávolítandó karakter
	 */
	public void Remove(Character target) {
		characters.remove(target);
	}

	/**
	 * Beállítja a paraméterként megadott mező-tömböt szomszédoknak.
	 * @param n Szomszédos mezők tömbje
	 */
	public void SetNeighbors(ArrayList<Field> n) {
		neighbors=n;
	}

	/**
	 * Implicit getter a szomszédos mezők lekérdezésére.
	 * @return Szomszédos mezők
	 */
	public ArrayList<Field> GetNeighbors() {
		return neighbors;
	}

	/**
	 * Implicit getter a mezőn álló karakterek lekérdezésére.
	 * @return Mezőn álló karakterek
	 */
	public ArrayList<Character> GetCharacters() {
		return characters;
	}

	/**
	 * A Field osztály logger fügvénye, mely az adott mező tulajdonságait írja ki a standard kimentre és fájlba.
	 * @throws java.io.IOException
	 */
	public void log() throws java.io.IOException {
		System.out.println(Prototype.objectIDs.get(this) + ":");
		System.out.print("\tneighbors: ");
		StringJoiner str = new StringJoiner(", ");
		for (Field f : neighbors) str.add(Prototype.objectIDs.get(f));
		System.out.println(str.length() == 0 ? "-" : str);
		System.out.print("\tcharacters: ");
		str = new StringJoiner(", ");
		for (Character c : characters) str.add(Prototype.objectIDs.get(c));
		System.out.println(str.length() == 0 ? "-" : str);

		Prototype.writer.write(Prototype.objectIDs.get(this) + ":" + "\n");
		Prototype.writer.write("\tneighbors: ");
		str = new StringJoiner(", ");
		for (Field f : neighbors) str.add(Prototype.objectIDs.get(f));
		Prototype.writer.write((str.length() == 0 ? "-" : str) + "\n");
		Prototype.writer.write("\tcharacters: ");
		str = new StringJoiner(", ");
		for (Character c : characters) str.add(Prototype.objectIDs.get(c));
		Prototype.writer.write((str.length() == 0 ? "-" : str) + "\n");
	}
}
