package koporscho;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Koporscho csapat Projlab 
//  @ File Name : Storage.java
//  @ Date : 2022. 03. 25.
//  @ Authors : Szab� Egon, Bir� Ferenc, T�th B�lint, Ferge M�t�, Rahmi D�niel
//
//


import proto.Prototype;

/** A Field osztály leszármazottja, a raktárat reprezentálja, ahol az anyagok találhatók. */
public class Storage extends Field {
	/** A raktárban található anyagok jelenlegi mennyisége.*/
	private Materials supply;
	/** A raktárban található anyagok maximális mennyisége.*/
	private Materials totalSupply;

	public Storage(){
	}

	/**
	 * Ratármező konstruktora, mely a paraméterként kapott supply és totalSupply értékek beállításával hozza létre a mezőt.
	 * @param sp supply
	 * @param tsp totalSupply
	 */
	public Storage(Materials sp, Materials tsp) {
		supply = sp;
		totalSupply = tsp;
	}

	/**
	 *Meghívja a paraméterként kapott visitornak megfelelő függvényét.
	 * @param vis Visitor típusa
	 */
	public void React(IVis vis) {
		vis.InteractStorage();
	}

	/**
	 * Levon egy, paraméterként kapott, bizonyos mennyiséget a raktárban szereplő anyagokból.
	 * @param m Levonandó anyagok mennyisége
	 */
	public void SubtractMaterials(Materials m) {
		// Already checked that m is not more than the supply
		supply.SetAminoAcid(supply.GetAminoAcid() - m.GetAminoAcid());
		supply.SetNucleotide(supply.GetNucleotide() - m.GetNucleotide());
	}

	/**
	 * Beállítja a maximum tárolható anyagok mennyiségét a raktárban.
	 * @param m Maximálisan tárolható anyagok mennyisége
	 */
	public void SetTotalSupply(Materials m) {
		totalSupply = new Materials(m);
	}

	/**
	 *  Beállítja a tárolt anyagok mennyiségét a raktárban.
	 * @param m Tárolt anyagok mennyisége
	 */
	public void SetSupply(Materials m) {
		supply = new Materials(m);
	}

	/**
	 * Implicit getter függvény a raktárban található anyagok mennyiségének lekérdezésére.
	 * @return Raktárban található anyagok mennyisége
	 */
	public Materials GetSupply(){
		return supply;
	}

	/**
	 * A Storage osztály logger fügvénye, mely az adott raktár tulajdonságait írja ki a standard kimentre és fájlba.
	 * @throws java.io.IOException
	 */
	@Override
	public void log() throws java.io.IOException{
		super.log();


		System.out.print("\tsupply:");
		if(supply!=null) {
			System.out.println("\n\t\tnucleotide: " + supply.GetNucleotide());
			System.out.println("\t\taminoacid: " + supply.GetAminoAcid());
		}else System.out.println("-");

		System.out.print("\ttotalSupply: ");
		if(totalSupply!=null) {
			System.out.println("\n\t\tnucleotide: " + totalSupply.GetNucleotide());
			System.out.println("\t\taminoacid: "+ totalSupply.GetAminoAcid());
		}else System.out.println("-");

		Prototype.writer.write("\tsupply: ");
		if(supply!=null) {
			Prototype.writer.write("\n\t\tnucleotide: " + supply.GetNucleotide()+"\n");
			Prototype.writer.write("\t\taminoacid: " + supply.GetAminoAcid()+"\n");
		}else Prototype.writer.write("-"+"\n");

		Prototype.writer.write("\ttotalSupply: ");
		if(totalSupply!=null) {
			Prototype.writer.write("\n\t\tnucleotide: " + totalSupply.GetNucleotide()+"\n");
			Prototype.writer.write("\t\taminoacid: "+ totalSupply.GetAminoAcid()+"\n");
		}else Prototype.writer.write("-"+"\n");
	}
}
