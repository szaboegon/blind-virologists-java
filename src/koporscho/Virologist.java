package koporscho;
import graphic.IViewable;
import graphic.View;
import proto.Prototype;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.StringJoiner;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Koporscho csapat Projlab 
//  @ File Name : Virologist.java
//  @ Date : 2022. 03. 25.
//  @ Authors : Szab� Egon, Bir� Ferenc, T�th B�lint, Ferge M�t�, Rahmi D�niel
//
//

/** A Virológust reprezentálja a játéban*/
public class Virologist extends Character implements IViewable {
	private final int apMax;
	private int apCurrent;

	/**
	 * Tárolja a jelenlegi és a maximum anyagokat
	 */
	private Materials materials, maxMaterials;

	private final int baseBagSize = 10;

	/**
	 * Tárolja a felszereléseket, amelyek a virológusnál van
	 */
	private final ArrayList<Equipment> equipment;

	/**
	 * Tárolja az elkészített ágenseket, amelyek a virológusnál van
	 */
	private final ArrayList<Agent> agentInventory;

	/**
	 * Tárolja a recepteket, melyeket megtanult a virológus
	 */
	private final ArrayList<Agent> agentRecipes;

	/**
	 * Virológus neve
	 */
	private String name;

	private final ArrayList<View> views = new ArrayList<>();

	/**
	 * A Virológus konstruktora.
	 */
	public Virologist(String n) {
		name = n;
		equipment = new ArrayList<>();
		agentInventory = new ArrayList<>();
		agentRecipes = new ArrayList<>();
		apMax = 3;
		apCurrent = 3;
	}

	/**
	 * A Character osztály Move függvényének fölüldefiniálása
	 *
	 * @param field Célmező, amelyre a charactert mozgatjuk.
	 */
	@Override
	public void Move(Field field) {
		if (currentField != null)
			apCurrent--;
		super.Move(field);
		NotifyViews();
	}

	/**
	 * Elkészíti a paraméterként beadott ágenst
	 *
	 * @param agent Az ágens amit készít a virológus
	 */
	public void CraftAgent(Agent agent) {
		if (agent == null)
			return;
		apCurrent--;
		if (agentRecipes.contains(agent) && materials.CanCraft(agent.GetRecipe())) {
			agentInventory.add(agent);
			materials.SetNucleotide(materials.GetNucleotide() - agent.GetRecipe().GetNucleotide());
			materials.SetAminoAcid(materials.GetAminoAcid() - agent.GetRecipe().GetNucleotide());
		}
		NotifyViews();
	}

	/**
	 * A virológus eszköztárához hozzáadja a paraméterként kapott anyagokat.
	 *
	 * @param m Hozzáadandó anyagok
	 */
	public void AddMaterials(Materials m) {
		materials.SetNucleotide(materials.GetNucleotide() + m.GetNucleotide());
		materials.SetAminoAcid(materials.GetAminoAcid() + m.GetAminoAcid());
		NotifyViews();
	}

	/**
	 * A virológus eszköztárához hozzáadja a paraméterként kapott ágenst.
	 *
	 * @param agent Hozzáadandó ágens
	 */
	public void AddAgent(Agent agent) {
		agentInventory.add(agent);
		NotifyViews();
	}

	/**
	 * A virológus megtanulja egy ágens receptjét, genetikai kódját.
	 *
	 * @param agent Megtanulandó ágens
	 */
	public void LearnRecipe(Agent agent) {
		if (!agentRecipes.contains(agent))
			agentRecipes.add(agent);
		NotifyViews();
	}

	/**
	 * A virológus elfelejti egy ágens receptjét.
	 */
	public void ForgetRecipes() {
		agentRecipes.clear();
		NotifyViews();
	}

	/**
	 * A virológus felkeni a paraméterként kapott ágenst a paraméterként kapott célpontra
	 *
	 * @param target Célpont
	 * @param agent  Ágens
	 */
	public void ApplyAgent(Character target, Agent agent) {
		target.HandleAgent(this, agent, false);
		this.RemoveAgent(agent);
		apCurrent--;
		NotifyViews();
	}

	/**
	 * A virológus ellop egy felszerelést a paraméterként kapott karaktertől.
	 *
	 * @param target Célpont, akitől a virológus lop
	 * @param e      Tárgy, amit a virológus ellop
	 */
	public void StealEquipment(Character target, Equipment e) {
		boolean success = ((Virologist) target).HandleSteal(this, e);

		if (success) {
			this.AddEquipment(e);
			apCurrent--;
		}
		NotifyViews();
	}

	/**
	 * Eltávolítja a paraméterként kapott ágenst a virológustól.
	 *
	 * @param a Eltávolítandó ágens
	 */
	public void RemoveAgent(Agent a) {
		agentInventory.remove(a);
	}

	/**
	 * A mezőn végezhető művelet meghívása.
	 */
	public void Interact() {
		apCurrent--;
		VirologistVisitor Vis = new VirologistVisitor(this);
		currentField.React(Vis);
		NotifyViews();
	}

	/**
	 * A virológus felvesz egy felszerelést az eszköztárába.
	 *
	 * @param e Felszerelés, amit a virológus felvesz
	 */
	public void AddEquipment(Equipment e) {
		if(e == null)
			return;
		equipment.add(e);
		StatusEffect ef = e.GetEffect();
		if (!ef.GetDead())
			activeEffects.add(e.GetEffect());
		if (ef.GetBagsize() > 0) {
			SetMaxMaterials(new Materials(baseBagSize + ef.GetBagsize(), baseBagSize + ef.GetBagsize()));
		}
		NotifyViews();
	}

	/**
	 * A virológus megtámad a baltával egy másik virológust
	 *
	 * @param target A célpont virológus
	 */
	public void Chop(Virologist target) {
		for (Equipment e : this.GetEquipment()) {
			if (e.GetEffect().GetDead() && e.GetDurability() > 0) {
				target.AddEffect(e.GetEffect());
				e.DecreaseDurability();
				apCurrent--;
				target.SetApCurrent(0);
			}
		}
		NotifyViews();
	}

	/**
	 * A virológus eltávolít egy felszerelést az eszköztárából.
	 *
	 * @param e Eltávolítandó felszerelés
	 */
	public void RemoveEquipment(Equipment e) {
		equipment.remove(e);
		activeEffects.remove(e.GetEffect());

		if (e.GetEffect().GetBagsize() > 0) {
			SetMaxMaterials(new Materials(baseBagSize, baseBagSize));

			if (GetCurrentMaterials().GetNucleotide() > GetMaxMaterials().GetNucleotide())
				SetMaterials(new Materials(GetMaxMaterials().GetNucleotide(), GetCurrentMaterials().GetAminoAcid()));

			if (GetCurrentMaterials().GetAminoAcid() > GetMaxMaterials().GetAminoAcid())
				SetMaterials(new Materials(GetCurrentMaterials().GetNucleotide(), GetMaxMaterials().GetAminoAcid()));
		}
		NotifyViews();
	}

	/**
	 * Kezeli a lopást.
	 *
	 * @param source A lopást elkövető virológus
	 * @param e      Ellopott felszerlés
	 * @return igazzal tér vissza, ha sikeres volt.
	 */
	public boolean HandleSteal(Virologist source, Equipment e) {
		boolean paralyzed = false;
		for (StatusEffect ef : activeEffects) {
			if (ef.GetParalyzed()) {
				paralyzed = true;
				break;
			}
		}
		if (paralyzed) {
			this.RemoveEquipment(e);
		}
		NotifyViews();
		return paralyzed;
	}

	/**
	 * Implicit getter a virológus által ismert ágens-receptek lekérdezésére.
	 *
	 * @return A virológus által ismert ágens-receptek.
	 */
	public ArrayList<Agent> GetRecipes() {
		return agentRecipes;
	}

	/**
	 * Implicit getter a virológus által ismert ágens-inventory lekérdezésére.
	 *
	 * @return Ismert ágensek
	 */
	public ArrayList<Agent> GetAgentInventory() {
		return agentInventory;
	}

	/**
	 * Implicit getter a virológus által birtokolt anyagok lekérdezésére.
	 *
	 * @return A virológus által birtokolt anyagok
	 */
	public Materials GetCurrentMaterials() {
		return materials;
	}

	/**
	 * Implicit getter a virológus által birtokolható maximális anyagok lekérdezésére.
	 *
	 * @return A virológus által birtokolható maximális anyagok
	 */
	public Materials GetMaxMaterials() {
		return maxMaterials;
	}

	/**
	 * Implicit getter a virológus által birtokolt felszerelések lekérdezésére.
	 *
	 * @return
	 */
	public ArrayList<Equipment> GetEquipment() {
		return equipment;
	}


	/**
	 * Az idő múlását szimuláló függvény
	 */
	@Override
	public void Tick() {
		//check for bear
		boolean isBear = false;
		boolean isParalyzed = false;
		boolean hasChorea = false;
		for (StatusEffect e : activeEffects) {
			if (e.GetDead()) {
				this.SetApCurrent(0);
			}
			if (e.GetBear()) {
				isBear = true;
			} else if (e.GetParalyzed()) {
				isParalyzed = true;
			} else if (e.GetChorea()) {
				hasChorea = true;
			}
		}

		if (isBear && !isParalyzed) {
			StatusEffect.Bear(this);
			this.SetApCurrent(0);
		} else if (hasChorea) {
			while (this.GetApCurrent() > 0)
				StatusEffect.Chorea(this);
		}

		for (StatusEffect e : activeEffects) {
			if (e.GetAmnesia()) {
				ForgetRecipes();
				break;
			}
		}
		agentInventory.removeIf(a -> a.ReduceLifespan() == 0);
		super.Tick();
		NotifyViews();
	}

	/**
	 * Visszatér a karakter által ismert ágensek számával. A győztes kihirdetésénél használt függvény.
	 *
	 * @return karakter által ismert ágensek száma
	 */
	public int GetRecipeCount() {
		return agentRecipes.size();
	}

	public void SetMaxMaterials(Materials m) {
		maxMaterials = new Materials(m);
		NotifyViews();
	}

	public void SetMaterials(Materials m) {
		materials = new Materials(m);
		NotifyViews();
	}

	public String GetName() {
		return name;
	}

	public int GetApCurrent() {
		return apCurrent;
	}

	public ArrayList<StatusEffect> GetStatusEffects() {
		return activeEffects;
	}

	public void SetApCurrent(int val) {
		apCurrent = val;
		NotifyViews();
	}

	public void RefreshAP() {
		apCurrent = apMax;
		NotifyViews();
	}

	public void NotifyViews() {
		for (View v : views) {
			v.Redraw(this);
		}
	}

	public void AddView(View view) {
		views.add(view);
	}

	public void RemoveView(View view) {
		views.remove(view);
	}

	public void SetName(String n) {
		name = n;
	}
}
