package koporscho;
import proto.Prototype;

import java.util.ArrayList;
import java.util.Random;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Koporscho csapat Projlab 
//  @ File Name : StatusEffect.java
//  @ Date : 2022. 03. 25.
//  @ Authors : Szab� Egon, Bir� Ferenc, T�th B�lint, Ferge M�t�, Rahmi D�niel
//
//




/** Megvalósítja a különböző státusz effekteket, amelyek egy karakterre kerülhetnek */
public class StatusEffect {
	private float immunity;
	private boolean paralyzed;
	private boolean chorea;
	private boolean amnesia;
	private int bagsize;
	private boolean reflect;
	private int duration;
	private boolean bear;
	private boolean dead;


	/** Implicit konstruktor a StatusEffect számára*/
	public StatusEffect() {
		immunity=0;
		paralyzed=false;
		chorea=false;
		amnesia=false;
		bagsize=0;
		reflect=false;
		duration=-1;
		bear=false;
		dead=false;

	}

	/**
	 * A Statuseffect osztály másoló konstruktora.
	 * @param effect Másolandó StatusEffect objektum.
	 */
	public StatusEffect(StatusEffect effect) {
		immunity=effect.immunity;
		paralyzed=effect.paralyzed;
		chorea=effect.chorea;
		amnesia=effect.amnesia;
		bagsize=effect.bagsize;
		reflect=effect.reflect;
		duration=effect.duration;
		bear=effect.bear;
		dead=effect.dead;

		if(Prototype.objectIDs.containsKey(effect)) {
			String id = Prototype.objectIDs.get(effect);
			String base = id;
				for(int i = 1; i < 10; i++) {
					id = base+"_"+i;
					if(!Prototype.objectIDs.containsValue(id))
						break;
				}
			Prototype.objectIDs.put(this, id);
			Prototype.objectIDsInv.put(id, this);
			Prototype.statusEffects.add(this);
		}
	}

	/** Csökkenti az effekt hatásidejét*/
	public int reduceDuration() {
		if(duration==-1)
			return -1;
		return --duration;
	}

	/**
	 * A chorea hatást megvalósító függvény.
	 * @param target A hatás alatt álló karakter
	 */
	public static void Chorea(Character target) {
		ArrayList<Field> neighbours = target.GetField().GetNeighbors();
		// Random index from neighbours
		int i = 0;

		if(neighbours != null &&neighbours.size()!=0) {
			if (neighbours.size() > 1) {
				Random random = new Random();
				i = random.nextInt(neighbours.size() - 1);
			}

			target.Move(neighbours.get(i));
		}
	}

	/**
	 * A medvevírus hatását valósítja meg, melyben az elszenvedő véletlen mozog a mezők között,
	 * melyekkel interaktál és, ha az adott mezőn virológusok tartózkodnak, akkor meg próbálja fertőzni őket a  medvevírussal.
	 * @param target A hatás alatt álló karakter
	 */
	public static void Bear(Character target){
		Chorea(target);

		BearVisitor bVis=new BearVisitor((Virologist)target);

		Field currentField=target.GetField();
		currentField.React(bVis);

		ArrayList<Character> charsOnField = new ArrayList<>(currentField.GetCharacters());
		charsOnField.remove(target);

		for(Character c: charsOnField){
			StatusEffect s=new StatusEffect();
			s.SetBear(true);
			s.duration = -1;

			Agent bearAgent=new Agent(s,new Materials(0,0),"BearAgent");
			((Virologist) target).AddAgent(bearAgent);
			String id = "bE";
			Prototype.objectIDs.put(s, id);
			Prototype.objectIDsInv.put(id, s);
			Agent b = ((Virologist) target).GetAgentInventory().get(0);
			((Virologist) target).ApplyAgent(c,b);
		}
	}

	/**
	 * A StatusEffect osztály logger fügvénye, mely az adott StatusEffect tulajdonságait írja ki a standard kimentre és fájlba.
	 * @throws java.io.IOException
	 */
	public void log() throws java.io.IOException {
		System.out.println(Prototype.objectIDs.get(this)+":");
		if(immunity!=0) System.out.println("\timmunity: " + immunity);
		if(paralyzed)System.out.println("\tparalyzed: true");
		if(chorea)System.out.println("\tchorea: true");
		if(amnesia)System.out.println("\tamnesia: true");
		if(bagsize!=0)System.out.println("\tbagsize: " + bagsize);
		if(reflect)System.out.println("\treflect: true");
		if(bear)System.out.println("\tbear: true");
		if(dead)System.out.println("\tdead: true");
		System.out.println("\tduration: " + duration);


		Prototype.writer.write(Prototype.objectIDs.get(this)+":"+"\n");
		if(immunity!=0) Prototype.writer.write("\timmunity: " + immunity+"\n");
		if(paralyzed) Prototype.writer.write("\tparalyzed: true\n");
		if(chorea)Prototype.writer.write("\tchorea: true\n");
		if(amnesia)Prototype.writer.write("\tamnesia: true\n");
		if(bagsize!=0)Prototype.writer.write("\tbagsize: " + bagsize+"\n");
		if(reflect)Prototype.writer.write("\treflect: true\n");
		if(bear)Prototype.writer.write("\tbear: true\n");
		if(dead)Prototype.writer.write("\tdead: true\n");
		Prototype.writer.write("\tduration: " + duration+"\n");
	}

	public float GetImmunity() {
		return immunity;
	}

	public void SetImmunity(float immunity) {
		this.immunity = immunity;
	}

	public boolean GetParalyzed() {
		return paralyzed;
	}

	public void SetParalyzed(boolean paralyzed) {
		this.paralyzed = paralyzed;
	}

	public boolean GetChorea() {
		return chorea;
	}

	public void SetChorea(boolean chorea) {
		this.chorea = chorea;
	}

	public boolean GetAmnesia() {
		return amnesia;
	}

	public void SetAmnesia(boolean amnesia) {
		this.amnesia = amnesia;
	}

	public int GetBagsize() {
		return bagsize;
	}

	public void SetBagsize(int bagsize) {
		this.bagsize = bagsize;
	}

	public boolean GetReflect() {
		return reflect;
	}

	public void SetReflect(boolean reflect) {
		this.reflect = reflect;
	}

	public int GetDuration() {
		return duration;
	}

	public void SetDuration(int duration) {
		this.duration = duration;
	}

	public boolean GetBear() {
		return bear;
	}

	public void SetBear(boolean bear) {
		this.bear = bear;
	}

	public boolean GetDead() {
		return dead;
	}

	public void SetDead(boolean dead) {this.dead = dead;}
}
